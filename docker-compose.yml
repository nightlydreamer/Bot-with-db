version: '3'

services:
  bot:
    image: bot_image
    build:
      context: 'bot'
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
  db:
    image: db_image
    build:
      context: 'db'
      dockerfile: Dockerfile
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_PORT: ${DB_PORT}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      bash -c "sed -i 'echo s/{DB_DATABASE}/${DB_DATABASE}/g' /docker-entrypoint-initdb.d/init.sql && \
      postgres \
      -c wal_level=replica \
      -c hot_standby=on \
      -c max_wal_senders=10 \
      -c max_replication_slots=10 \
      -c hot_standby_feedback=on"
#    volumes:
#      - db:/var/lib/postgresql/data

#  db_repl:
#    image: db_repl_image
#    build:
#      context: 'db_repl'
#      dockerfile: Dockerfile
#    ports:
#      - 5433:5432
#    environment:
#      DB_REPL_USER: ${DB_REPL_USER}
#      DB_REPL_PASSWORD: ${DB_REPL_PASSWORD}
#      DB_REPL_HOST: ${DB_REPL_HOST}
#      DB_REPL_PORT: ${DB_REPL_PORT}
#    command: |
#      bash -c "
#      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=5432
#      do
#      echo 'Waiting for primary to connect...'
#      sleep 1s
#      done
#      echo 'Backup done, starting replica...'
#      chmod 0700 /var/lib/postgresql/data
#      postgres
#      "
#    depends_on:
#      - db
